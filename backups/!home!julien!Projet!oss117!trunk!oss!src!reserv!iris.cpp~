#include "iris.hpp"
#include <iostream>

#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

#define DEBUG(x) std::cout << "DEBUG : " << x << " - line : "<< __LINE__ << " - file : " << __FILE__ << std::endl;

bool find_iris_pupil(const cv::Mat &frame,cv::Point& Pupil){  
  
  cv::Mat gradients = compute_matrix_gradients (frame); 

  cv::Mat mags = compute_matrix_gradients_norm (gradients);
  
  /** only grandients of interest are kept **/
  double gradient_threshold = computeDynamicThreshold(mags, 50.0);
  
  normalisation(gradients, mags, gradient_threshold);

  std::cout << gradients << std::endl;
  /** Smoothing the noise **/


  cv::Mat weight = set_weight(frame);
  /** Check every gradient center  **/
  
  //cv::Mat outSum = cv::Mat::zeros(frame.rows,frame.cols,CV_64F); //a matrice of zeros 

  cv::Mat outSum (frame.rows, frame.cols, CV_64F);
  
  for (int i = 0; i < gradients.rows; i++){
    for (int j = 0; j < gradients.cols; j++){
      
      int gX = gradients.at<cv::Vec2d>(i,j)[0];
      int gY = gradients.at<cv::Vec2d>(i,j)[1];
      if (gX == 0 && gY == 0){
        continue;
      }
            
      testPossibleCentersFormula(i, j, weight, gX, gY, outSum);
    }
              
  }

  double numGradients = (weight.rows*weight.cols);

  cv::Mat out;
  
  outSum.convertTo(out, CV_32F,1.0/numGradients);
  
  cv::Point maxP;
  double maxVal;
  cv::minMaxLoc(out, NULL,&maxVal,NULL,&maxP); //maxP will be the location of maxVal

  Pupil = maxP;

  return (true);

}



cv::Mat compute_matrix_gradients(const cv::Mat &mat){


  cv::Mat out(mat.rows, mat.cols, CV_64FC2);
  double x,y;
  for (int i = 0; i < mat.rows; i++){
    for (int j = 0; j < mat.cols; j++){
      x = 256;
      y = 256;
      if (i == 0){
        y = mat.at<uchar>(i+1, j) - mat.at<uchar>(i,j);
      }
      if (i == mat.rows-1){
        y = mat.at<uchar>(i,j) - mat.at<uchar>(i-1,j);
      }
      if (j == 0){
        x = mat.at<uchar>(i,j+1) - mat.at<uchar>(i,j);
      }
      if (j == mat.cols - 1){
        x = mat.at<uchar> (i,j) - mat.at<uchar>(i,j-1);
      }        
      if (x == 256){
        x = mat.at<uchar>(i,j+1) - mat.at<uchar>(i,j-1);}
      if (y == 256){
        y = mat.at<uchar>(i+1, j) - mat.at<uchar>(i-1,j);}
      x = x / 2.0;
      y = y / 2.0;
      out.at<cv::Vec2d>(i,j) = cv::Vec2d(x,y);
    }
  }
    return (out);
}




cv::Mat compute_matrix_gradients_norm(const cv::Mat& mat){
  
cv::Mat mags(mat.rows, mat.cols, CV_64F);
 for (int i = 0; i < mags.rows; i++){
  for (int j = 0; j < mags.cols; j++){
    mags.at<double>(i,j) = cv::norm(mat.at<cv::Vec2d>(i,j));
  }
 }

return (mags);

}

/**Function to retain only significant gradients **/

double computeDynamicThreshold(const cv::Mat &mat, double std_dev_factor) {

  //Scalar = 4 grandiants vector.
  cv::Scalar std_magn_grad, mean_magn_grad;
  
  cv::meanStdDev(mat, mean_magn_grad, std_magn_grad);
  
  double std_dev = std_magn_grad[0] / sqrt(mat.rows*mat.cols);
  return (std_dev_factor * std_dev + mean_magn_grad[0]);
}



/** Test the possible iris centers **/

void normalisation (cv::Mat &gradients, const cv::Mat& mags, float gradient_threshold){

  for (int i = 0; i < gradients.rows; i++){
    for (int j = 0; j < gradients.cols; j++){
      double magnitude = mags.at<double>(i,j);
      double gX = gradients.at<cv::Vec2d>(i,j)[0];
      double gY = gradients.at<cv::Vec2d>(i,j)[1];

      if (magnitude > gradient_threshold){

        gradients.at<cv::Vec2d>(i,j)[0] = gX / magnitude;
        gradients.at<cv::Vec2d>(i,j)[1] = gY / magnitude;
      }

      else{
        gradients.at<cv::Vec2d>(i,j)[0] = 0;
        gradients.at<cv::Vec2d>(i,j)[1] = 0;

      }
    }
  }
}


cv::Mat set_weight (const cv::Mat &frame){

  cv::Mat weight;
  cv::GaussianBlur (frame, weight, cv::Size(5,5), 0,0);

  for (int i = 0; i < weight.rows; i++){
    for (int j = 0; j < weight.cols; j++){
      weight.at<uchar>(i,j) = 255 - weight.at<uchar>(i,j);
    }
  }
  return (weight);

}

void testPossibleCentersFormula(int x, int y, const cv::Mat &weight,int gx, int gy, cv::Mat &out) {
           
  for (int cx = 0; cx < out.rows; cx++){
    for (int cy = 0; cy < out.cols; cy++){
      if (x == cx && y == cy) { 
        continue;
      }
               
      double dx = x - cx;
      double dy = y - cy;
      double magnitude = sqrt((dx * dx) + (dy * dy));
      // normalization
      dx = dx / magnitude;
      dy = dy / magnitude;
      double dotProduct = dx*gx + dy*gy;
      dotProduct = std::max(0.0,dotProduct);
      out.at<double>(cx,cy) += dotProduct * dotProduct * weight.at<uchar>(cx,cy);
    }
  }
}
